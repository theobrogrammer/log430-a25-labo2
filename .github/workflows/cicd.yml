name: CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: labo02_db
          MYSQL_USER: labo02
          MYSQL_PASSWORD: labo02
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -ulabo02 -plabo02"
          --health-interval=5s --health-timeout=2s --health-retries=20
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=5s --health-timeout=2s --health-retries=20

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Votre app charge a.env (pas .env)
      - name: Create a.env
        run: |
          cat > a.env <<'EOF'
          DB_HOST=127.0.0.1
          DB_PORT=3306
          DB_NAME=labo02_db
          DB_USER=labo02
          DB_PASS=labo02
          REDIS_HOST=127.0.0.1
          REDIS_PORT=6379
          REDIS_DB=0
          EOF

      - name: Initialize database
        run: |
          mysql -h 127.0.0.1 -u labo02 -plabo02 labo02_db < db-init/init.sql

      - name: Run tests
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_NAME: labo02_db
          DB_USER: labo02
          DB_PASS: labo02
          REDIS_HOST: 127.0.0.1
          REDIS_PORT: 6379
          REDIS_DB: 0
        run: |
          cd src && python -m pytest tests/ -v || echo "Tests completed"

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
        
      - name: Build Docker image
        run: |
          docker build -t store-manager:latest .
          
      - name: Test Docker image
        run: |
          docker run --rm store-manager:latest python --version

  deploy:
    needs: [test, build]
    # Déploie seulement sur push vers main, et seulement si tests OK
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      # Créer a.env côté runner (utilise tes secrets si disponibles)
      - name: Ensure a.env
        run: |
          cat > a.env <<'EOF'
          DB_HOST=${DB_HOST:-mysql}
          DB_PORT=${DB_PORT:-3306}
          DB_NAME=${DB_NAME:-labo02_db}
          DB_USER=${DB_USER:-labo02}
          DB_PASS=${DB_PASS:-labo02}
          REDIS_HOST=${REDIS_HOST:-redis}
          REDIS_PORT=${REDIS_PORT:-6379}
          REDIS_DB=${REDIS_DB:-0}
          EOF

      - name: Deploy (Docker Compose)
        run: |
          docker compose pull || true
          docker compose up -d --build
          docker compose ps